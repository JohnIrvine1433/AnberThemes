#!/bin/bash
#
# ThemeMaster
# https://github.com/JohnIrvine1433/ThemeMaster
# Description : main script
#

#
# Environment settings
#
export TERM=linux
sudo chmod 666 /dev/tty1
source ./helper
shopt -s extglob # required for extented pattern recognition

#
# Controls management
#
isitoga=$(dmesg | grep odroidgo2-joypad/input/input2)
if [ ! -z "$isitoga" ]; then
  sudo ./oga_controls ThemeMaster &
else
  sudo ./anbernic_controls ThemeMaster &
fi

##########################
# APP SETTINGS VARIABLES #
##########################
# ThemeMaster Reference
github_app_owner="JohnIrvine1433"
github_app_repo="ThemeMaster"
current_app_version="3.0.0"
# Default app settings (overwritten by ThemeMaster.cfg)
mode="A" # Default app mode to GitHub collection
app_colorscheme="Default" # Default app UI color scheme
app_autocheckupdate="off" # Do not check for updates at startup
themes_autocheckupdate="off" # Do not check for updates at startup
collections=("Jetup13" "CodyV59" "EmuELEC" "RetroPie") # GitHub Collection Mode - Default collection list
active_collection="Jetup13" # GitHub Collection Mode - Default active collection

#####################
#  GLOBAL VARIABLES #
#####################
# Version Management
app_updates_checked=0
latest_app_version=""
app_outdated=""
# ThemeMaster Mode Management
mode_title=""
# Common variables
outdatedthemes=()
installedthemes=()
onlinethemes=()
changelog=()
themes_updates_checked=0
github_user=""
# Gallery mode variables
gallery_640=()
gallery_640_untested=()
gallery_480=()
gallery_480_untested=()
declare -A gallery_array

#########################
# THEMEMASTER FUNCTIONS #
#########################
#
# Global functions
#
function wget_result() {
  local wget_return=$1
  local returnto=$2
  local err_msg
  local wget_error

  if [[ $wget_return -ne 0 ]]; then
    err_msg=$(</tmp/ThemeMaster_wget.log)
    case $wget_return in
      1) wget_error="Generic error code." ;;
      2) wget_error="Parse errorâ€”for instance, when parsing command-line options." ;;
      3) wget_error="File I/O error." ;;
      4) wget_error="Network failure." ;;
      5) wget_error="SSL verification failure." ;;
      6) wget_error="Username/password authentication failure." ;;
      7) wget_error="Protocol errors." ;;
      8) wget_error="Server issued an error response." ;;
      *) wget_error="Unmanaged error." ;;
    esac
    dialog --backtitle "ThemeMaster - System" --yes-label "Return to MainMenu" --no-label "Exit ThemeMaster" --yesno "$wget_error\n$err_msg" 15 50 2>&1 >/dev/tty1
    case $? in
    0)
      if [[ $returnto == "InitLoader" ]]; then
        InitLoader
      elif [[ $returnto == "SettingsMenu" ]]; then
        SettingsMenu
      elif [[[ $returnto == "UpdateMenu" ]]; then
        UpdateMenu
      elif [[ $returnto == "ChangeLogMenu" ]]; then
        ChangeLogMenu
      elif [[ $returnto == "InstallMenu" ]]; then
        InstallMenu
      else
        MainMenu
      fi
    ;;
    1)
      ExitApp ;;
    esac
  fi
}

function InitLoader() {
  local latest
  local current

  #Make sure data folder is created
  mkdir -p ./data
  #App settings initialisation
  if [ -e "ThemeMaster.cfg" ]; then
    source ThemeMaster.cfg
    # Make sure envrionnement variables are set (in case system is not recognised, see SetEnvironment )
    if [[ -z "$themes_location" || -z "$temp_ram_folder" || -z "$app_location" ]]; then
      SetEnvironment
      SaveSettings
    fi
  else
    SetEnvironment
    SaveSettings
  fi
  SetColorScheme
  dialog --clear
  dialog --infobox "Initialization... Please wait !" 5 50 >/dev/tty1
  #Checking internet access
  wget -nv -o /tmp/ThemeMaster_wget.log --spider http://google.com
  wget_result $? "InitLoader"
  SetMode
  LoadInstalledThemes
  if [[ "$themes_autocheckupdate" == "on" ]]; then
    CheckThemesUpdates
  fi
  if [[ "$app_autocheckupdate" == "on" ]]; then
    CheckAppUpdates "MainMenu"
  fi
  #Update Gallery data
  wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/repos/Jetup13/Emulationstation-OGA-Theme-Gallery/commits"
  wget_result $?
  latest=$(sed '/\"date\":/!d;q' /tmp/ThemeMaster_wget.output  | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')
  if [ ! -e ./data/gallery.db ]; then
    UpdateGalleryDB
    echo $latest > ./data/gallery.version
  else
    if [ -e "./data/gallery.version" ]; then
      current=$(cat "./data/gallery.version")
    fi
    if [[ "$current" != "$latest" ]]; then
      UpdateGalleryDB
      echo $latest > ./data/gallery.version
    fi
  fi
  MainMenu
}

function SetEnvironment() {
  local temp

  temp=$(grep "title=" /usr/share/plymouth/themes/text.plymouth)

  if [[ $temp == *"ArkOS"* ]]; then
    themes_location="/roms/themes/" #ES themes location path with trailing slash
    temp_ram_folder="/dev/shm/"     #RAM folder with trailing slash
    app_location="/roms/tools/"     #App installation path with trailing slash
  elif [[ $temp == *"TheRA"* ]]; then
    themes_location="/etc/emulationstation/themes/"
    temp_ram_folder="/dev/shm/"
    app_location="/opt/tools/"
  else
    themes_location=""
    temp_ram_folder=""
    app_location=""
    SaveSettings
    dialog --clear --backtitle "ThemeMaster - System" --msgbox "OS not recognised, please manually edit ThemeMaster.cfg and relaunch." 10 50 2>&1 >/dev/tty1
    ExitApp
  fi
}

function SetMode() {
  if [[ $mode == "A" ]]; then
    github_user=$active_collection
    mode_title="GitHub Repository Mode - Collection: $github_user"
    LoadGitHubThemes
  else
    mode_title="Theme Gallery Mode"
    LoadGallery
  fi
}

function SetColorScheme() {
  if [ "$app_colorscheme" == "Default" ]; then
    export -n DIALORGRC
  else
    export DIALOGRC=${app_location}ThemeMaster/${app_colorscheme}.dialogrc
  fi
}

function CheckAppUpdates() {
  local retval
  local returnto=$1

  dialog --clear
  dialog --infobox "Checking for ThemeMaster updates...\nPlease wait !" 5 50 >/dev/tty1
  sleep 1
  #Get latest ThemeMaster tag version
  wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/repos/${github_app_owner}/${github_app_repo}/releases/latest"
  wget_result $? "SettingsMenu"
  latest_app_version=$(grep '"tag_name":' /tmp/ThemeMaster_wget.output  | sed -E 's/.*"([^"]+)".*/\1/')

  app_updates_checked=1

  if [[ "$latest_app_version" != "$current_app_version" ]]; then
    app_outdated=1
    dialog --backtitle "ThemeMaster - System" --yes-label "Yes, now!" --no-label "No, later..." --yesno "A new release is available !! Launch update?" 10 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      UpdateApp
      ;;
    1)
      if [ $returnto == "MainMenu" ]; then
        MainMenu
      else
        SettingsMenu
      fi
      ;;
    esac
  else
    app_outdated=0
    dialog --clear
    dialog --infobox "ThemeMaster is up to date..." 5 50 >/dev/tty1
    sleep 1
  fi
}

function UpdateApp() {
  local UPDATE_URL="https://api.github.com/repos/${github_app_owner}/${github_app_repo}/zipball"
  #local UPDATE_URL="https://api.github.com/repos/${github_app_owner}/${github_app_repo}/zipball/Nightly"
  local package_folder
  local retval

  dialog --clear
  dialog --infobox "Downloading and installing ThemeMaster update..." 5 50 >/dev/tty1
  sleep 1
  mkdir -p ${temp_ram_folder}app_update_temp #create a temp folder in RAM

  wget -nv -o /tmp/ThemeMaster_wget.log "$UPDATE_URL" -O ${temp_ram_folder}app_update_temp/update.zip
  wget_result $? "SettingsMenu"
  if unzip -qt ${temp_ram_folder}app_update_temp/update.zip | grep 'No errors detected'; then
    #Unzipping archive
    # sudo
    unzip -qo ${temp_ram_folder}app_update_temp/update.zip -d ${temp_ram_folder}app_update_temp/ #unzip directly in RAM
    #Getting unzipped package folder's name
    package_folder=$(find ${temp_ram_folder}app_update_temp -maxdepth 1 -type d -name "${github_app_owner}*")
    package_folder="${package_folder##*/}"
    #Overwritting existing files
    cp -rf ${temp_ram_folder}app_update_temp/${package_folder}/* $app_location
    chmod 777 ${app_location}*.sh #make sure newly downloaded scripts have right permission
    #Deleting temporary files...
    rm -rf ${temp_ram_folder}app_update_temp #remove the temp folder from RAM
    #Load updater module from new release
    source ./updater
    #Execute post-install updater function
    PostInstallUpdater

    dialog --clear --backtitle "ThemeMaster - System" --msgbox "ThemeMaster successfully updated !\nQuit and relaunch ThemeMaster." 10 50 2>&1 >/dev/tty1

    ExitApp
  else
    #Deleting temporary files...
    rm -rf ${temp_ram_folder}app_update_temp #remove the temp folder from RAM

    dialog --backtitle "ThemeMaster - System" --yes-label "Try again" --no-label "Quit ThemeMaster" --yesno "Update have failed because the downloaded archive couldn't be extracted." 20 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      UpdateApp
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function SaveSettings() {
  echo "app_conf_version=\"${current_app_version}\"" >ThemeMaster.cfg
  echo "mode=\"${mode}\"" >>ThemeMaster.cfg
  echo "themes_location=\"${themes_location}\"" >>ThemeMaster.cfg
  echo "temp_ram_folder=\"${temp_ram_folder}\"" >>ThemeMaster.cfg
  echo "app_location=\"${app_location}\"" >>ThemeMaster.cfg
  echo "app_autocheckupdate=\"${app_autocheckupdate}\"" >>ThemeMaster.cfg
  echo "themes_autocheckupdate=\"${themes_autocheckupdate}\"" >>ThemeMaster.cfg
  echo "active_collection=\"${active_collection}\"" >>ThemeMaster.cfg
  echo "collections=(${collections[@]})" >>ThemeMaster.cfg
  echo "app_colorscheme=\"${app_colorscheme}\"" >>ThemeMaster.cfg
}

function ExitApp() {
  rm /tmp/ThemeMaster_*

  if [ ! -z "$isitoga" ]; then
    pgrep -f oga_controls | sudo xargs kill -9
  else
    pgrep -f anbernic_controls | sudo xargs kill -9
  fi
  clear
  exit
}
#
# Theme Management functions
#
function InstallTheme() {
  local theme=$1
  local latest
  local REP_URL
  local temp
  local THEME_CONTENT
  local retval
  local estimated_size
  local temparr

  # In gallery mode, set $github_user according to current $theme
  if [[ $mode == "B" ]]; then
    get_github_user $theme
  fi

  dialog --clear
  dialog --infobox "Installation is about to start..." 5 50 >/dev/tty1

  wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/repos/${github_user}/${theme}/commits"
  wget_result $? "UpdateMenu"
  latest=$(sed '/\"date\":/!d;q' /tmp/ThemeMaster_wget.output  | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')

  REP_URL="https://api.github.com/repos/${github_user}/${theme}/zipball"

  mkdir -p ${temp_ram_folder}theme_update_temp #create a temp folder in RAM

  #Downloading archive
  # Only works if content-length header is provided
  # wget -q --show-progress "$REP_URL" -O ${temp_ram_folder}theme_update_temp/update.zip 2>&1 | stdbuf -oL grep -o "[0-9]\+%" | grep -o "[0-9]\+" | dialog --gauge "Downloading ${theme} package..." 10 50 0
  # Alternative for chunked encoding if file size can be known/estimated
  # estimated_size=($(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}" | grep -m 1 '\"size\": ' | sed -e 's/.*\"size\": \(.*\),/\1/'))
  # wget -q --show-progress "$REP_URL" -O ${temp_ram_folder}theme_update_temp/update.zip 2>&1 | stdbuf -oL grep -o "[0-9]\+K \." | stdbuf -oL grep -o "[0-9]\+" | stdbuf -oL awk "{print int(\$1*100/$estimated_size)}" | dialog --gauge "Downloading package..." 10 50 0 >/dev/tty1
  # Display download progress directly form wget
  wget -q --show-progress "$REP_URL" -O ${temp_ram_folder}theme_update_temp/update.zip 2>&1 | stdbuf -oL sed -E 's/\.\.+/---/g'| dialog --progressbox "Downloading package..." 10 50 >/dev/tty1

  if unzip -qt "${temp_ram_folder}theme_update_temp/update.zip" | grep 'No errors detected'; then
    dialog --clear
    dialog --infobox "Theme's installation in progess..." 5 50 >/dev/tty1
    sleep 1

    #Unzipping archive
    # sudo
    unzip -qo "${temp_ram_folder}theme_update_temp/update.zip" -d "${temp_ram_folder}theme_update_temp/" #unzip directly in RAM
    #Extract the folder's name created from the archive
    temp=$(find ${temp_ram_folder}theme_update_temp -maxdepth 1 -type d -name "${github_user}*")
    temp="${temp##*/}"
    #Init the variable
    THEME_CONTENT="${temp_ram_folder}theme_update_temp/${temp}/*"
    #Create folder if necessary
    mkdir -p ${themes_location}$theme
    #Overwritting existing files
    cp -rf $THEME_CONTENT ${themes_location}$theme
    #Create the theme's log file for version management
    echo $latest > ./data/${theme}.version
    #echo $latest >> ./data/${theme}.version #alternative to keep every version installed, reading also need to be modified
    #Deleting temporary files
    # sudo
    rm -rf ${temp_ram_folder}theme_update_temp #remove the temp folder from RAM
    #Reload liste of installed themes (in case of install)
    LoadInstalledThemes
    #In case of update, remove theme from outdated themes list
    for temp in "${outdatedthemes[@]}"
    do
        [[ $temp != $theme ]] && temparr+=($temp)
    done
    outdatedthemes=("${temparr[@]}")

    dialog --clear --backtitle "$mode_title" --msgbox "Theme $theme successfully installed!" 8 50 2>&1 >/dev/tty1

    MainMenu

  else
    #Install failed
    #Deleting temporary files
    # sudo
    rm -rf ${temp_ram_folder}theme_update_temp #remove the temp folder from RAM

    dialog --yes-label "Try again" --no-label "Exit" --yesno "Theme's installation have failed because the archive did not download correctly. Check your connection and try again." 10 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      UpdateMenu
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function RemoveTheme() {
  local theme="$1"

  dialog --clear
  dialog --infobox "Removing $theme ..." 5 50 >/dev/tty1

  # sudo
  rm -rf ${themes_location}$theme
  # sudo
  rm -f ./data/${theme}.version

  LoadInstalledThemes

  dialog --clear --backtitle "$mode_title" --msgbox "Theme $theme successfully removed!" 10 50 2>&1 >/dev/tty1

  UninstallMenu
}

function LoadInstalledThemes {
  #(re)Load already installed themes
  unset installedthemes

  installedthemes=(${themes_location}*)         # This creates an array of the full paths to all subdirs
  installedthemes=("${installedthemes[@]##*/}") # This removes the path prefix, leaving just the dir names
}

function GetChangeLog {
  local theme=$1
  local temparr=()
  unset changelog

  # In gallery mode, set $github_user according to current $theme
  if [[ $mode == "B" ]]; then
    get_github_user $theme
  fi

  SAVEIFS=$IFS
  IFS=$'\n'
  wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/repos/${github_user}/${theme}/commits"
  wget_result $? "ChangeLogMenu"
  temparr=($(grep '"message": \|"date": ' /tmp/ThemeMaster_wget.output  | sed -e 's/.*\"message\": \"//' | sed -e 's/.*\"date\": \"//'))
  IFS=$SAVEIFS
  temparr=("${temparr[@]%,}")
  temparr=("${temparr[@]//\"/}")

  i=0
  for value in "${temparr[@]}"; do
    if [[ $i -eq 0 ]]; then
      i=1
      echo $i
    elif [[ $i -eq 1 ]]; then
      changelog+=("$value")
      i=2
      echo $i
    elif [[ $i -eq 2 ]]; then
      changelog+=("$value")
      i=0
      echo $i
    fi
  done
}

function CheckThemesUpdates() {
  local theme
  local latest
  local current
  local retval
  local cached_outdatedthemes=()
  local unchecked_themes=()

  dialog --clear
  dialog --infobox "Checking for themes updates... Please wait !" 5 50 >/dev/tty1
  sleep 1

  #(re)Load installed themes with new release
  unset outdatedthemes
  # Load cached outdated themes from current collection
  if [[ -e "./data/outdatedthemes.cache" ]]; then
    source ./data/outdatedthemes.cache
    outdatedthemes=($(comm -12 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${cached_outdatedthemes[@]}" | LC_COLLATE=C sort -f)))
  fi
  # Check for online update only if necessary (installed and not already cached)
  unchecked_themes=($(comm -13 <(printf '%s\n' "${outdatedthemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f)))
  for theme in "${unchecked_themes[@]}"; do
    latest=""
    current=""
    if [ -d "${themes_location}$theme" ]; then
      # In gallery mode, set $github_user according to current $theme
      if [[ $mode == "B" ]]; then
        get_github_user $theme
      fi
      dialog --infobox "Checking for themes updates... Please wait !\n$theme" 5 50 >/dev/tty1
      wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/repos/${github_user}/${theme}/commits"
      wget_result $?
      latest=$(sed '/\"date\":/!d;q' /tmp/ThemeMaster_wget.output  | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')
      if [ -e "./data/${theme}.version" ]; then
        current=$(cat "./data/${theme}.version")
        #current=$(head -n 1 ./data/${theme}.version) #Alternative when every version installed is kept - see file creation
      fi
      if [[ "$current" != "$latest" ]]; then
        outdatedthemes+=("$theme")
      fi
    fi
  done

  themes_updates_checked=1

  if [[ -z $outdatedthemes ]]; then
    dialog --clear
    dialog --infobox "All themes are up to date..." 5 50 >/dev/tty1
    sleep 1
  else
    # Update cached outdated themes
    cached_outdatedthemes=(${cached_outdatedthemes[@]} ${outdatedthemes[@]})
    echo "cached_outdatedthemes=(${cached_outdatedthemes[@]})" > ./data/outdatedthemes.cache

    dialog --clear
    dialog --infobox "New theme update available !!" 5 50 >/dev/tty1
    sleep 1
  fi
}
#
# GitHub Repository mode functions
#
function LoadGitHubThemes() {
  #(re)Load online themes
  unset onlinethemes

  SAVEIFS=$IFS
  IFS=$'\n'
  wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/users/${github_user}/repos"
  wget_result $?
  onlinethemes=($(grep '\"name\": \"es-theme' /tmp/ThemeMaster_wget.output  | sed -e 's/\"name\": \"\(.*\)\",/\1/'))
  IFS=$SAVEIFS
  onlinethemes=("${onlinethemes[@]/#+([[:blank:]])/}") # remove leading space/tab from each element
  onlinethemes=("${onlinethemes[@]/%+([[:blank:]])/}") # remove trailing space/tab from each element
}
#
# Gallery mode functions
#
function get_github_user() {
  local theme=$1
  github_user=${gallery_array[$theme]}
}

function LoadGallery() {
  local author
  local theme
  local _480
  local _640
  local _854

  unset onlinethemes
  unset gallery_640
  unset gallery_480
  unset gallery_640_untested
  unset gallery_480_untested
  {
  read
  while read -r author theme _480 _640 _854
  do
    if [[ "$_640" == "Yes" ]]; then
      gallery_640+=("$theme")
    elif [[ "$_640" == "Untested" ]]; then
      gallery_640_untested+=("$theme")
    fi
    if [[ "$_480" == "Yes" ]]; then
      gallery_480+=("$theme")
    elif [[ "$_480" == "Untested" ]]; then
      gallery_480_untested+=("$theme")
    fi
    onlinethemes+=("$theme")
    gallery_array[$theme]="$author"
  done
} < ./data/gallery.db
}

function UpdateGalleryDB() {
  local temp1
  local temp
  local preview_url
  local _480
  local _640
  local _854
  local account
  local theme_repo

  dialog --infobox "Updating Gallery data... Please wait !\n" 5 50 >/dev/tty1
  wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output "https://raw.githubusercontent.com/Jetup13/Emulationstation-OGA-Theme-Gallery/main/README.md"
  wget_result $? "InitLoader"
  grep "|" /tmp/ThemeMaster_wget.output > /tmp/ThemeMaster_temp.output
  tail -n+3 /tmp/ThemeMaster_temp.output > /tmp/ThemeMaster_wget.output
  sed 's/[][!() ]//g' /tmp/ThemeMaster_wget.output > /tmp/ThemeMaster_temp.output
  > ./data/gallery.db
  SAVEIFS=$IFS
  IFS='|'
  while read -r temp1 temp preview_url _480 _640 _854
  do
    account=$(echo $temp | awk -F"/" '{print $4}')
    theme_repo=$(echo $temp | awk -F"/" '{print $5}')
    echo "${account} ${theme_repo} ${_480} ${_640}" >> ./data/gallery.db
    if [ ! -e "./data/${theme_repo}.png" ]; then
      wget -nv -o /tmp/ThemeMaster_wget.log -O "./data/${theme_repo}.png" $preview_url
      wget_result $? "InitLoader"
    fi
  done < /tmp/ThemeMaster_temp.output
  IFS=$SAVEIFS
}

##################
# THEMEMASTER UI #
##################

# Specfic to Theme Gallery mode
function BrowseMenu() {
  local filter=$1
  local selected_theme=$2
  local cmd
  local options
  local choice
  local retval
  local theme
  local browse_title
  local temp

  if [[ -z $filter ]]; then
    browse_title="Select theme's resolution compatibility :"
    options=(
      A "Verified on 480x320"
      B "Verified on 640x480"
      C "Untested on 480x320"
      D "Untested on 640x480"
    )
    cmd=(dialog --cancel-label "Back" --backtitle "$mode_title" --menu "$browse_title" "15" "50" "15")
  else
    if [[ "$filter" == "480verified" ]]; then
      browse_title="Themes tested on 480x320 displays :"
      for theme in "${gallery_480[@]}"; do
        if [ ! -d "${themes_location}$theme" ]; then
          options+=($theme "by ${gallery_array[$theme]}")
        fi
      done
    elif [[ "$filter" == "480untested" ]]; then
      browse_title="Themes not tested on 480x320 displays :"
      for theme in "${gallery_480_untested[@]}"; do
        if [ ! -d "${themes_location}$theme" ]; then
          options+=($theme "by ${gallery_array[$theme]}")
        fi
      done
    elif [[ "$filter" == "640verified" ]]; then
      browse_title="Themes tested on 640x480 displays :"
      for theme in "${gallery_640[@]}"; do
        if [ ! -d "${themes_location}$theme" ]; then
          options+=($theme "by ${gallery_array[$theme]}")
        fi
      done
    elif [[ "$filter" == "640untested" ]]; then
      browse_title="Themes untested on 640x480 displays :"
      for theme in "${gallery_640_untested[@]}"; do
        if [ ! -d "${themes_location}$theme" ]; then
          options+=($theme "by ${gallery_array[$theme]}")
        fi
      done
    else
      #Safeguard
      MainMenu
    fi
    cmd=(dialog --help-button --help-label "Details" --cancel-label "Back" --ok-label "Install" --backtitle "$mode_title" --default-item "$selected_theme" --menu "$browse_title" "15" "50" "15")
  fi

  if [[ -z $options ]]; then
    dialog --clear --backtitle "$mode_title" --msgbox "None (left) available to be installed" 10 50 2>&1 >/dev/tty1
    BrowseMenu
  fi

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [[ -z $filter ]]; then
      case $choice in
        A) BrowseMenu "480verified" ;;
        B) BrowseMenu "640verified" ;;
        C) BrowseMenu "480untested" ;;
        D) BrowseMenu "640untested" ;;
      esac
    else
      InstallTheme "$choice"
    fi
    ;;
  1)
    if [[ -z $filter ]]; then
      MainMenu
    else
      BrowseMenu
    fi
    ;;
  2)
    InstallSubMenu "$choice" "$filter" ;;
  esac
}

function InstallSubMenu {
  local theme="$1"
  local filter="$2"
  local description
  local retval

  theme=${theme/HELP /}

  if [ -e "./data/${theme}.png" ]; then
    clear
    image-viewer ${app_location}ThemeMaster/data/${theme}.png > /dev/null 2>&1
    if [ "$mode" == "A" ]; then
      InstallMenu "$theme"
    else
      if [[ ! -z $filter ]]; then
        BrowseMenu "$filter" "$theme"
      else
        BrowseMenu
      fi
    fi
  else
    # In gallery mode, set $github_user according to current $theme
    if [[ $mode == "B" ]]; then
      get_github_user $theme
    fi
    wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/repos/${github_user}/${theme}"
    wget_result $? "InstallMenu"
    description=$(sed '/\"description\":/!d;q' /tmp/ThemeMaster_wget.output  | sed -e 's/\"description\": \"//' | sed -e 's/\",//')
    if [[ $description == *"null,"* ]]; then
      description="** No information available **"
    fi
    dialog --clear --backtitle "$mode_title" --title " [ ${theme} ] " --msgbox "About:\n ${description}" 10 50 2>&1 >/dev/tty1
    if [ "$mode" == "A" ]; then
      InstallMenu "$theme"
    else
      if [[ ! -z $filter ]]; then
        BrowseMenu "$filter" "$theme"
      else
        BrowseMenu
      fi
    fi
  fi
}

function InstallMenu() {
  local selected_theme=$1
  local theme
  local options
  local cmd
  local choice
  local retval

  # Get themes not currently installed
  for theme in "${onlinethemes[@]}"; do
    if [ ! -d "${themes_location}$theme" ]; then
      options+=($theme "Install")
    fi
  done
  # Check whether there is still at least a theme to be installed
  if [[ -z $options ]]; then
    dialog --clear --backtitle "$mode_title" --msgbox "No more themes to be installed" 10 50 2>&1 >/dev/tty1
    MainMenu
  fi

  title="[ Install Themes ]"

  cmd=(dialog --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Cancel" --backtitle "$mode_title" --title "$title" --default-item "$selected_theme" --menu "Select theme from the list:" "15" "50" "15")
  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$choice"
    ;;
  1)
    MainMenu
    ;;
  2)
    InstallSubMenu "$choice"
    ;;
  esac
}

function UpdateSubMenu {
  local theme="$1"
  local commitmsg
  local retval

  theme=${theme/HELP /}
  # In gallery mode, set $github_user according to current $theme
  if [[ $mode == "B" ]]; then
    get_github_user $theme
  fi

  wget -nv -o /tmp/ThemeMaster_wget.log -O /tmp/ThemeMaster_wget.output --no-check-certificate "https://api.github.com/repos/${github_user}/${theme}/commits"
  wget_result $?
  commitmsg=$(sed '/\"message\":/!d;q' /tmp/ThemeMaster_wget.output  | sed -e 's/\"message\": \"//' | sed -e 's/\",//')

  dialog --backtitle "$mode_title" --yes-label "Update" --no-label "Back" --yesno "Theme : ${theme}\nUpdate content : ${commitmsg}" 15 50 2>&1 >/dev/tty1
  retval=$?
  case $retval in
  0)
    InstallTheme "$theme"
    ;;
  1)
    UpdateMenu
    ;;
  esac
}

function UpdateMenu() {
  local theme
  local options
  local cmd
  local choice
  local retval

  if [[ $themes_updates_checked -eq 0 ]]; then
    CheckThemesUpdates
  fi

  if [[ -z "$outdatedthemes" ]]; then
    dialog --backtitle "$mode_title" --yesno "No updates available... Check again for updates ?" 10 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      themes_updates_checked=0
      UpdateMenu
      ;;
    1)
      MainMenu
      ;;
    esac
  fi

  # Select themes to update
  for theme in "${outdatedthemes[@]}"; do
    options+=($theme "Update")
  done

  cmd=(dialog --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Cancel" --backtitle "$mode_title" --title " [ New releases ] " --menu "Select theme to update:" "15" "50" "15")
  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$choice"
    ;;
  1)
    MainMenu
    ;;
  2)
    UpdateSubMenu "$choice"
    ;;
  esac
}

function ChangeLogMenu() {
  local theme
  local options
  local cmd
  local choice
  local retval
  local themes

  if [[ -z $1 ]]; then
    # Load installed and managed themes
    themes=($(comm -12 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes[@]}"; do
      options+=($theme "See Changelog")
    done

    if [[ -z $options ]]; then
      dialog --clear --backtitle "$mode_title" --msgbox "No installed theme from $github_user" 5 50 2>&1 >/dev/tty1
      AdvancedMenu
    fi


    cmd=(dialog --cancel-label "Cancel" --backtitle "$mode_title" --title " [ Themes Changelog ] " --menu "Select theme :" "15" "50" "15")
    choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

    retval=$?
    case $retval in
    0)
      ChangeLogMenu "$choice"
      ;;
    1)
      AdvancedMenu
      ;;
    esac
  else
    GetChangeLog $1

    SAVEIFS=$IFS
    IFS=$'\n'
    dialog --clear --backtitle "$mode_title" --msgbox "$theme changelog :\n${changelog[*]}" 15 50 2>&1 >/dev/tty1
    IFS=$SAVEIFS

    AdvancedMenu
  fi
}

function UninstallMenu() {
  local themes2remove
  local theme
  local options
  local title
  local cmd
  local choice
  local retval

  if [[ -z "$1" ]]; then
    # Uninstall managed themes
    themes2remove=($(comm -12 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    options+=(Other "System themes")
    title="[ Remove Themes ]"
  else
    # Uninstall non managed themes
    themes2remove=($(comm -13 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    if [[ -z $options ]]; then
      dialog --clear --backtitle "$mode_title" --msgbox "No unmanaged theme installed !" 5 50 2>&1 >/dev/tty1
      UninstallMenu
    fi
    title="\Zb\Z1[ Caution - not from $github_user collection ]"
  fi

  cmd=(dialog --colors --backtitle "$mode_title" --title "$title" --menu "Select theme from the list:" "15" "50" "15")

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "$choice" == "Other" ]; then
      UninstallMenu "$choice"
    else
      RemoveTheme "$choice"
    fi
    ;;
  1)
    AdvancedMenu
    ;;
  esac
}

function ReinstallMenu() {
  local theme
  local options
  local cmd
  local choice
  local retval

  # Get themes alrady installed
  for theme in "${onlinethemes[@]}"; do
    if [ -d "${themes_location}$theme" ]; then
      options+=($theme "Reinstall")
    fi
  done
  if [[ -z $options ]]; then
    dialog --clear --backtitle "$mode_title" --msgbox "No theme to be reinstalled !" 5 50 2>&1 >/dev/tty1
    AdvancedMenu
  fi
  title=" [ Reinstall Themes ] "

  cmd=(dialog --ok-label "OK" --cancel-label "Cancel" --backtitle "$mode_title" --title "$title" --menu "Select theme from the list:" "15" "50" "15")
  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$choice"
    ;;
  1)
    AdvancedMenu
    ;;
  esac
}

function AdvancedMenu() {
  local cmd
  local options
  local choice
  local retval

  cmd=(dialog --cancel-label "Back" --backtitle "$mode_title" --title " [ Advanced Menu ] " --menu "Advanced actions :" "15" "50" "15")

  options=(
    A "View a theme changelog"
    B "Uninstall a theme"
    C "Reinstall a theme"
  )

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    case $choice in
    A) ChangeLogMenu ;;
    B) UninstallMenu ;;
    C) ReinstallMenu ;;
    esac
    ;;
  1)
    MainMenu
    ;;
  esac
}

function AppChangeLog() {
  local temp

  temp=$(<changelog)
  dialog --clear --backtitle "ThemeMaster - v$current_app_version" --msgbox "$temp" 15 50 2>&1 >/dev/tty1

  SettingsMenu
}

function ColorSchemeMenu() {
  local cmd
  local options
  local choice
  local retval
  local dialog_config
  local temp

  dialog_config=(${app_location}ThemeMaster/*.dialogrc)         # This creates an array of the full paths to all .dialogrc files
  dialog_config=("${dialog_config[@]##*/}") #Remove path prefix
  dialog_config=("${dialog_config[@]%.*}") #Get filename without extension

  cmd=(dialog --backtitle "ThemeMaster - System" --title " [ Color Scheme Selection ] " --radiolist "Select the ThemeMaster UI color scheme :" "15" "50" "15")

  if [[ "$app_colorscheme" == "Default" || -z $app_colorscheme ]]; then
    options+=(Default "System's color scheme" "on")
  else
    options+=(Default "System's scheme" "off")
  fi
  for temp in "${dialog_config[@]}"; do
    if [ "$temp" == "$app_colorscheme" ]; then
      options+=($temp "Customized color scheme" "on")
    else
      options+=($temp "Customized color scheme" "off")
    fi
  done

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "$choice" != "$app_colorscheme" ]; then
      app_colorscheme=$choice
      SaveSettings
      SetColorScheme
    fi
    SettingsMenu
    ;;
  1)
    SettingsMenu
    ;;
  esac
}

function StartupSettings() {
  local cmd
  local options
  local choice
  local choices
  local retval

  cmd=(dialog --ok-label "Apply" --separate-output --backtitle "ThemeMaster - System" --title " [ Startup Options ] " --checklist "NB : ThemeMaster initialisation will take longer espacially if check for themes updates is activated :" "15" "50" "15")

  options=(
    ThemeMaster "Check for updates" $app_autocheckupdate
    Themes "Check for update" $themes_autocheckupdate
  )

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    app_autocheckupdate="off"
    themes_autocheckupdate="off"
    for choice in $choices; do
      case $choice in
      ThemeMaster) app_autocheckupdate="on" ;;
      Themes) themes_autocheckupdate="on" ;;
      esac
    done
    SaveSettings
    SettingsMenu
    ;;
  1)
    SettingsMenu
    ;;
  esac
}

# Specfic to GitHub Repository mode
function SelectCollectionMenu() {
  local cmd
  local options
  local choice
  local retval
  local temp

  cmd=(dialog --backtitle "ThemeMaster - System" --title " [ Theme Configuration ] " --radiolist "Set the collection to be used :" "15" "50" "15")

  for temp in "${collections[@]}"; do
    if [ "$temp" == "$active_collection" ]; then
      options+=($temp "Themes collection" "on")
    else
      options+=($temp "Themes collection" "off")
    fi
  done

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "$choice" != "$active_collection" ]; then
      active_collection=$choice
      dialog --clear
      dialog --infobox "Reloading parameters... Please wait !" 5 50 >/dev/tty1
      themes_updates_checked=0
      SetMode
      SaveSettings
    fi
    MainMenu
    ;;
  1)
    SettingsMenu
    ;;
  esac
}

function SetModeMenu() {
  local cmd
  local options
  local choice
  local retval

  cmd=(dialog --backtitle "ThemeMaster - System" --title " [ Mode Selection ] " --radiolist "Select the application mode to be used :" "15" "50" "15")

  if [ "$mode" == "A" ]; then
    options+=(A "GitHub repository" "on")
    options+=(B "Theme gallery by Jetup" "off")
  else
    options+=(A "GitHub repository" "off")
    options+=(B "Theme gallery by Jetup" "on")
  fi

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "$choice" != "$mode" ]; then
      mode=$choice
      dialog --clear
      dialog --infobox "Reloading parameters... Please wait !" 5 50 >/dev/tty1
      SetMode
      SaveSettings
      themes_updates_checked=0
    fi
    MainMenu
    ;;
  1)
    SettingsMenu
    ;;
  esac
}

function SettingsMenu() {
  local cmd
  local options
  local choice
  local retval

  cmd=(dialog --cancel-label "Back" --backtitle "ThemeMaster - System" --title " [ Settings ] " --menu "" "15" "50" "15")

  options=(
    A "Update ThemeMaster"
    B "View changelog"
    C "UI color scheme"
    D "Startup configuration"
    E "Change App Mode"
  )
  if [ "$mode" == "A" ]; then
    options+=(F "Change active collection")
  fi

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    case $choice in
    A)
      if [[ $app_updates_checked -eq 0 ]]; then
        CheckAppUpdates
        SettingsMenu
      elif [[ $app_outdated -eq 0 ]]; then
        dialog --clear --backtitle "ThemeMaster - System" --msgbox "ThemeMaster is up to date." 5 50 2>&1 >/dev/tty1
        SettingsMenu
      else
        dialog --backtitle "ThemeMaster - System" --yes-label "Yes, go!" --no-label "No, later..." --yesno "You're about to update ThemeMaster, no further confirmation..." 10 50 2>&1 >/dev/tty1
        retval=$?
        case $retval in
        0)
          UpdateApp
          ;;
        1)
          SettingsMenu
          ;;
        esac
      fi
      ;;
    B) AppChangeLog ;;
    C) ColorSchemeMenu ;;
    D) StartupSettings ;;
    E) SetModeMenu ;;
    F) SelectCollectionMenu ;;
    esac
    ;;
  1)
    MainMenu
    ;;
  esac
}

function MainMenu() {
  local cmd
  local options
  local choice
  local retval

  cmd=(dialog --no-cancel --backtitle "$mode_title" --title " [ Main Menu ] " --menu "D-pad to move, A for <enter>, B for <space>:" "15" "50" "15")

  if [ "$mode" == "A" ]; then
    options=(
      A "Install a theme"
      B "Update a theme"
      C "Advanced menu"
      D "ThemeMaster Settings"
      E "Exit to emulationstation"
    )
  else
    options=(
      A "Browse gallery"
      B "Update a theme"
      C "Advanced menu"
      D "ThemeMaster Settings"
      E "Exit to emulationstation"
    )
  fi


  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    case $choice in
    A)
      if [ "$mode" == "A" ]; then
        InstallMenu
      else
        BrowseMenu
      fi
    ;;
    B) UpdateMenu ;;
    C) AdvancedMenu ;;
    D) SettingsMenu ;;
    E) ExitApp ;;
    esac
    ;;
  1)
    ExitApp ;;
  esac
}

clear
InitLoader
