#!/bin/bash

#
# ThemeMaster
# https://github.com/JohnIrvine1433/ThemeMaster
#

#
# Environment settings
#
export TERM=linux
sudo chmod 666 /dev/tty1
source ./helper
shopt -s extglob # required for extented pattern recognition

#
# Joystick controls
#
sudo ./oga_controls ThemeMaster &

#
# ThemeMaster Management
#
github_app_owner="JohnIrvine1433"
github_app_repo="ThemeMaster"
current_app_version="2.2.0"

#
# ThemeMaster settings initialisation
#
if [ -e "ThemeMaster.cfg" ]; then
  source ThemeMaster.cfg
  # Make sure envrionnement variables are set (in case system is not recognised, see SetEnvironment )
  if [[ -z "$themes_location" || -z "$temp_ram_folder" || -z "$app_location" ]]; then
    SetEnvironment
    SaveSettings
  fi
else
  # Do not check for updates at startup
  app_autocheckupdate="off"
  themes_autocheckupdate="off"
  # Default themes collection - github repositories must start with es-theme
  collections=("Jetup13" "CodyV59" "EmuELEC" "RetroPie")
  github_user="Jetup13" #Default collection
  # Default color scheme
  app_colorscheme="Default"
  # Environment settings
  SetEnvironment
  SaveSettings
fi

#
# Reused global variables
#
onlinethemes=()
installedthemes=()
outdatedthemes=()
changelog=()
themes_updates_checked=0
app_updates_checked=0
latest_app_version=""
app_outdated=""

#######################
# ThemeMaster FUNCTIONS #
#######################

function SetEnvironment() {
  local temp

  temp=$(grep "title=" /usr/share/plymouth/themes/text.plymouth)

  if [[ $temp == *"ArkOS"* ]]; then
    themes_location="/roms/themes/" #ES themes location path with trailing slash
    temp_ram_folder="/dev/shm/"     #RAM folder with trailing slash
    app_location="/roms/tools/"     #App installation path with trailing slash
  elif [[ $temp == *"TheRA"* ]]; then
    themes_location="/etc/emulationstation/themes/"
    temp_ram_folder="/dev/shm/"
    app_location="/opt/tools/"
  else
    themes_location=""
    temp_ram_folder=""
    app_location=""
    SaveSettings
    dialog --clear --backtitle "ThemeMaster - System" --msgbox "OS not recognised, please manually edit ThemeMaster.cfg and relaunch." 10 50 2>&1 >/dev/tty1
    ExitApp
  fi
}

function InitLoader() {
  local retval
  local temparr

  SetColorScheme

  dialog --clear
  dialog --infobox "Initialization... Please wait !" 5 50 >/dev/tty1
  sleep 1

  dialog --infobox "Initialization... Checking internet access" 5 50 >/dev/tty1
  wget -q --spider http://google.com

  if [ $? -eq 0 ]; then
    dialog --infobox "Initialization... Loading $github_user online themes" 5 50 >/dev/tty1
    LoadOnlineThemes
    dialog --infobox "Initialization... Loading local themes" 5 50 >/dev/tty1
    LoadInstalledThemes
    if [[ "$themes_autocheckupdate" == "on" ]]; then
      CheckThemesUpdates
    fi
    if [[ "$app_autocheckupdate" == "on" ]]; then
      CheckAppUpdates
    fi
    MainMenu
  else
    dialog --backtitle "ThemeMaster - System" --yes-label "Try again" --no-label "Exit" --yesno "Internet connection required!" 5 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      InitLoader
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function CheckAppUpdates() {

  dialog --clear
  dialog --infobox "Checking for ThemeMaster updates...\nPlease wait !" 5 50 >/dev/tty1
  sleep 1
  #Get latest ThemeMaster tag version
  latest_app_version=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_app_owner}/${github_app_repo}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  app_updates_checked=1

  if [[ "$latest_app_version" != "$current_app_version" ]]; then
    app_outdated=1

dialog --backtitle "ThemeMaster - System" --yes-label "Yes, now!" --no-label "No, later..." --yesno "A new release is available !! Launch update?" 5 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      UpdateApp
      ;;
    1)
      SettingsMenu
      ;;
    esac

  else
    app_outdated=0
    dialog --clear
    dialog --infobox "ThemeMaster is up to date..." 5 50 >/dev/tty1
    sleep 1
  fi

}

function UpdateApp() {
  local UPDATE_URL="https://api.github.com/repos/${github_app_owner}/${github_app_repo}/zipball"
  local package_folder
  local retval

  dialog --clear
  dialog --infobox "Downloading ThemeMaster update..." 5 50 >/dev/tty1

  mkdir -p ${temp_ram_folder}app_update_temp #create a temp folder in RAM

  wget -q "$UPDATE_URL" -O ${temp_ram_folder}app_update_temp/update.zip
  if unzip -qt ${temp_ram_folder}app_update_temp/update.zip | grep 'No errors detected'; then
    dialog --clear
    dialog --infobox "Installing ThemeMaster update..." 5 50 >/dev/tty1
    #Unzipping archive
    # sudo
    unzip -qo ${temp_ram_folder}app_update_temp/update.zip -d ${temp_ram_folder}app_update_temp/ #unzip directly in RAM
    #Getting unzipped package folder's name
    package_folder=$(find ${temp_ram_folder}app_update_temp -maxdepth 1 -type d -name "${github_app_owner}*")
    package_folder="${package_folder##*/}"
    #When backing up themes configuration and installation log files is required
    #cp ${app_location}ThemeMaster/*.log ${temp_ram_folder}app_update_temp/${package_folder}/ThemeMaster/ 2>/dev/null
    #cp ${app_location}ThemeMaster/*.cfg ${temp_ram_folder}app_update_temp/${package_folder}ThemeMaster/ 2>/dev/null
    #Overwritting existing files
    cp -rf ${temp_ram_folder}app_update_temp/${package_folder}/* $app_location
    chmod 777 ${app_location}*.sh #make sure newly downloaded scripts have right permission
    #Deleting temporary files...
    rm -rf ${temp_ram_folder}app_update_temp #remove the temp folder from RAM
    #Load updater module from new release
    source ./updater
    #Execute post-install updater function
    PostInstallUpdater

    dialog --clear --backtitle "ThemeMaster - System" --msgbox "ThemeMaster successfully updated !\nQuit and relaunch ThemeMaster." 10 50 2>&1 >/dev/tty1

    ExitApp
  else
    #Deleting temporary files...
    rm -rf ${temp_ram_folder}app_update_temp #remove the temp folder from RAM

    dialog --backtitle "ThemeMaster - System" --yes-label "Try again" --no-label "Quit ThemeMaster" --yesno "Update have failed because the archive did not download correctly. Check your connection and try again." 20 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      UpdateApp
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function SaveSettings() {
  echo "app_conf_version=\"${current_app_version}\"" >ThemeMaster.cfg
  echo "themes_location=\"${themes_location}\"" >>ThemeMaster.cfg
  echo "temp_ram_folder=\"${temp_ram_folder}\"" >>ThemeMaster.cfg
  echo "app_location=\"${app_location}\"" >>ThemeMaster.cfg
  echo "app_autocheckupdate=\"${app_autocheckupdate}\"" >>ThemeMaster.cfg
  echo "themes_autocheckupdate=\"${themes_autocheckupdate}\"" >>ThemeMaster.cfg
  echo "github_user=\"${github_user}\"" >>ThemeMaster.cfg
  echo "collections=(${collections[@]})" >>ThemeMaster.cfg
  echo "app_colorscheme=\"${app_colorscheme}\""  >>ThemeMaster.cfg
}

function ExitApp() {
  pgrep -f oga_controls | sudo xargs kill -9
  exit
}

function CheckThemesUpdates() {
  local theme
  local latest
  local current
  local retval

  dialog --clear
  dialog --infobox "Checking for themes updates... Please wait !" 5 50 >/dev/tty1
  sleep 1

  #(re)Load installed themes with new release
  unset outdatedthemes
  for theme in "${onlinethemes[@]}"; do
    if [ -d "${themes_location}$theme" ]; then
      dialog --infobox "Checking for themes updates... Please wait !\n$theme" 5 50 >/dev/tty1
      latest=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"date\":/!d;q' | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')
      if [ -e "${theme}.log" ]; then
        current=$(cat "${theme}.log")
        #current=$(head -n 1 ${theme}.log) #Alternative when every version installed is kept - see file creation
      fi
      if [[ "$current" != "$latest" ]]; then
        outdatedthemes+=("$theme")
      fi
    fi
  done

  themes_updates_checked=1

  if [[ -z $outdatedthemes ]]; then
    dialog --clear
    dialog --infobox "All themes are up to date..." 5 50 >/dev/tty1
    sleep 1
  else
    dialog --clear
    dialog --infobox "New theme update available !!" 5 50 >/dev/tty1
    sleep 1
  fi
}

function GetChangeLog {
  local theme=$1
  local temparr=()
  unset changelog

  SAVEIFS=$IFS
  IFS=$'\n' temparr=($(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | grep '"message": \|"date": ' | sed -e 's/.*\"message\": \"//' | sed -e 's/.*\"date\": \"//'))
  IFS=$SAVEIFS
  temparr=("${temparr[@]%,}")
  temparr=("${temparr[@]//\"/}")

  i=0
  for value in "${temparr[@]}"; do
    if [[ $i -eq 0 ]]; then
      i=1
      echo $i
    elif [[ $i -eq 1 ]]; then
      changelog+=("$value")
      i=2
      echo $i
    elif [[ $i -eq 2 ]]; then
      changelog+=("$value")
      i=0
      echo $i
    fi
  done
}

function LoadInstalledThemes {
  #(re)Load already installed themes
  unset installedthemes

  installedthemes=(${themes_location}*)         # This creates an array of the full paths to all subdirs
  installedthemes=("${installedthemes[@]##*/}") # This removes the path prefix, leaving just the dir names
}

function LoadOnlineThemes() {
  #(re)Load online es-theme repositories
  unset onlinethemes

  SAVEIFS=$IFS
  IFS=$'\n'
  onlinethemes=($(wget --no-check-certificate -qO - "https://api.github.com/users/${github_user}/repos" | grep '\"name\": \"es-theme' | sed -e 's/\"name\": \"\(.*\)\",/\1/'))
  IFS=$SAVEIFS
  onlinethemes=("${onlinethemes[@]/#+([[:blank:]])/}") # remove leading space/tab from each element
  onlinethemes=("${onlinethemes[@]/%+([[:blank:]])/}") # remove trailing space/tab from each element
}

function InstallTheme() {
  local theme=$1
  local latest
  local REP_URL
  local temp
  local THEME_CONTENT
  local retval
  local estimated_size

  # dialog --clear
  # dialog --infobox "Installation is about to start..." 5 50 >/dev/tty1

  latest=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"date\":/!d;q' | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')

  REP_URL="https://api.github.com/repos/${github_user}/${theme}/zipball"

  mkdir -p ${temp_ram_folder}theme_update_temp #create a temp folder in RAM

  #Downloading archive
  # Only works if content-length header is provided
  # wget -q --show-progress "$REP_URL" -O ${temp_ram_folder}theme_update_temp/update.zip 2>&1 | stdbuf -oL grep -o "[0-9]\+%" | grep -o "[0-9]\+" | dialog --gauge "Downloading ${theme} package..." 10 50 0
  # Alternative for chunked encoding if file size can be known/estimated
  # estimated_size=($(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}" | grep -m 1 '\"size\": ' | sed -e 's/.*\"size\": \(.*\),/\1/'))
  # wget -q --show-progress "$REP_URL" -O ${temp_ram_folder}theme_update_temp/update.zip 2>&1 | stdbuf -oL grep -o "[0-9]\+K \." | stdbuf -oL grep -o "[0-9]\+" | stdbuf -oL awk "{print int(\$1*100/$estimated_size)}" | dialog --gauge "Downloading package..." 10 50 0 >/dev/tty1
  # Display download progress directly form wget
  wget -q --show-progress "$REP_URL" -O ${temp_ram_folder}theme_update_temp/update.zip 2>&1 | stdbuf -oL sed -E 's/\.\.+/---/g'| dialog --progressbox "Downloading package..." 10 50 >/dev/tty1

  if unzip -qt "${temp_ram_folder}theme_update_temp/update.zip" | grep 'No errors detected'; then
    dialog --clear
    dialog --infobox "Theme's installation in progess..." 5 50 >/dev/tty1
    sleep 1

    #Unzipping archive
    # sudo
    unzip -qo "${temp_ram_folder}theme_update_temp/update.zip" -d "${temp_ram_folder}theme_update_temp/" #unzip directly in RAM
    #Extract the folder's name created from the archive
    temp=$(find ${temp_ram_folder}theme_update_temp -maxdepth 1 -type d -name "${github_user}*")
    temp="${temp##*/}"
    #Init the variable
    THEME_CONTENT="${temp_ram_folder}theme_update_temp/${temp}/*"
    #Create folder if necessary
    mkdir -p ${themes_location}$theme
    #Overwritting existing files
    cp -rf $THEME_CONTENT ${themes_location}$theme
    #Create the theme's log file for version management
    echo $latest >${theme}.log
    #echo $latest >> ${theme}.log #alternative to keep every version installed, reading also need to be modified
    #Deleting temporary files
    # sudo
    rm -rf ${temp_ram_folder}theme_update_temp #remove the temp folder from RAM

    LoadInstalledThemes                               #reload liste of installed themes (in case of install)
    outdatedthemes=("${outdatedthemes[@]/${theme}/}") #in case of update, remove theme from outdated themes list

    dialog --clear --backtitle "ThemeMaster - $github_user" --msgbox "Theme $theme successfully installed!" 8 50 2>&1 >/dev/tty1

    MainMenu

  else
    #Install failed
    #Deleting temporary files
    # sudo
    rm -rf ${temp_ram_folder}theme_update_temp #remove the temp folder from RAM

    dialog --yes-label "Try again" --no-label "Exit" --yesno "Theme's installation have failed because the archive did not download correctly. Check your connection and try again." 10 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      UpdateMenu
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function RemoveTheme() {
  local theme="$1"

  dialog --clear
  dialog --infobox "Removing $theme ..." 5 50 >/dev/tty1

  # sudo
  rm -rf ${themes_location}$theme
  # sudo
  rm -f ${theme}.log

  LoadInstalledThemes

  dialog --clear --backtitle "ThemeMaster - $github_user" --msgbox "Theme $theme successfully removed!" 10 50 2>&1 >/dev/tty1

  UninstallMenu
}

function SetColorScheme() {
  if [ "$app_colorscheme" == "Default" ]; then
    export -n DIALORGRC
  else
    export DIALOGRC=${app_location}ThemeMaster/${app_colorscheme}.dialogrc
  fi
}

##################
# ThemeMaster UI #
##################

function InstallSubMenu {
  local theme="$1"
  local description
  local retval

  theme=${theme/HELP /}
  description=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}" | sed '/\"description\":/!d;q' | sed -e 's/\"description\": \"//' | sed -e 's/\",//')

  dialog --backtitle "${backtitle}" --yes-label "Install" --no-label "Back" --yesno "${theme} description :\n ${description}" 10 50 2>&1 >/dev/tty1
  retval=$?
  case $retval in
  0)
    InstallTheme "$theme"
    ;;
  1)
    InstallMenu
    ;;
  esac
}

function InstallMenu() {
  local theme
  local options
  local cmd
  local choice
  local retval

  # Get themes not currently installed
  for theme in "${onlinethemes[@]}"; do
    if [ ! -d "${themes_location}$theme" ]; then
      options+=($theme "Install")
    fi
  done
  # Check whether there is still at least a theme from the collection to be installed
  if [[ -z $options ]]; then
    dialog --clear --backtitle "ThemeMaster - $github_user" --msgbox "No more theme from $github_user to be installed" 10 50 2>&1 >/dev/tty1
    MainMenu
  fi

  title="[ Install Themes ]"

  cmd=(dialog --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Cancel" --backtitle "ThemeMaster - $github_user" --title "$title" --menu "Select theme from the list:" "15" "50" "15")
  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$choice"
    ;;
  1)
    MainMenu
    ;;
  2)
    InstallSubMenu "$choice"
    ;;
  esac
}

function UpdateSubMenu {
  local theme="$1"
  local commitmsg
  local retval

  theme=${theme/HELP /}
  commitmsg=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"message\":/!d;q' | sed -e 's/\"message\": \"//' | sed -e 's/\",//')

  dialog --backtitle "ThemeMaster - $github_user" --yes-label "Update" --no-label "Back" --yesno "Theme : ${theme}\nUpdate content : ${commitmsg}" 15 50 2>&1 >/dev/tty1
  retval=$?
  case $retval in
  0)
    InstallTheme "$theme"
    ;;
  1)
    UpdateMenu
    ;;
  esac
}

function UpdateMenu() {
  local theme
  local options
  local cmd
  local choice
  local retval

  if [[ $themes_updates_checked -eq 0 ]]; then
    CheckThemesUpdates
  fi

  if [[ -z "$outdatedthemes" ]]; then
    dialog --backtitle "ThemeMaster - $github_user" --yesno "No updates available... Check again for updates ?" 10 50 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      themes_updates_checked=0
      UpdateMenu
      ;;
    1)
      MainMenu
      ;;
    esac
  fi

  # Select themes to update
  for theme in "${outdatedthemes[@]}"; do
    options+=($theme "Update")
  done

  cmd=(dialog --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Cancel" --backtitle "ThemeMaster - $github_user" --title "[ New releases ]" --menu "Select theme to update:" "15" "50" "15")
  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$choice"
    ;;
  1)
    MainMenu
    ;;
  2)
    UpdateSubMenu "$choice"
    ;;
  esac
}

function ChangeLogMenu() {
  local theme
  local options
  local cmd
  local choice
  local retval
  local themes

  if [[ -z $1 ]]; then
    # Load installed and managed themes
    themes=($(comm -12 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes[@]}"; do
      options+=($theme "See Changelog")
    done

    if [[ -z $options ]]; then
      dialog --clear --backtitle "ThemeMaster - $github_user" --msgbox "No installed theme from $github_user" 5 50 2>&1 >/dev/tty1
      AdvancedMenu
    fi


    cmd=(dialog --cancel-label "Cancel" --backtitle "ThemeMaster - $github_user" --title "[ Themes Changelog ]" --menu "Select theme to update:" "15" "50" "15")
    choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

    retval=$?
    case $retval in
    0)
      ChangeLogMenu "$choice"
      ;;
    1)
      AdvancedMenu
      ;;
    esac
  else
    GetChangeLog $1

    SAVEIFS=$IFS
    IFS=$'\n'
    dialog --clear --backtitle "ThemeMaster - $github_user" --msgbox "$theme changelog :\n${changelog[*]}" 15 50 2>&1 >/dev/tty1
    IFS=$SAVEIFS

    AdvancedMenu
  fi
}

function UninstallMenu() {
  local themes2remove
  local theme
  local options
  local title
  local cmd
  local choice
  local retval

  if [[ -z "$1" ]]; then
    # Uninstall managed themes
    themes2remove=($(comm -12 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    options+=(Other "System themes")
    title="[ Remove Themes ]"
  else
    # Uninstall non managed themes
    themes2remove=($(comm -13 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    if [[ -z $options ]]; then
      dialog --clear --backtitle "ThemeMaster - $github_user" --msgbox "No unmanaged theme installed !" 5 50 2>&1 >/dev/tty1
      UninstallMenu
    fi
    title="\Zb\Z1[ Caution - not from $github_user collection ]"
  fi

  cmd=(dialog --colors --backtitle "ThemeMaster - $github_user" --title "$title" --menu "Select theme from the list:" "15" "50" "15")

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "$choice" == "Other" ]; then
      UninstallMenu "$choice"
    else
      RemoveTheme "$choice"
    fi
    ;;
  1)
    AdvancedMenu
    ;;
  esac
}

function ReinstallMenu() {
  local theme
  local options
  local cmd
  local choice
  local retval

  # Get themes alrady installed
  for theme in "${onlinethemes[@]}"; do
    if [ -d "${themes_location}$theme" ]; then
      options+=($theme "Reinstall")
    fi
  done
  if [[ -z $options ]]; then
    dialog --clear --backtitle "ThemeMaster - $github_user" --msgbox "No theme to be reinstalled !" 5 50 2>&1 >/dev/tty1
    AdvancedMenu
  fi
  title="[ Reinstall Themes ]"

  cmd=(dialog --ok-label "OK" --cancel-label "Cancel" --backtitle "ThemeMaster - $github_user" --title "$title" --menu "Select theme from the list:" "15" "50" "15")
  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$choice"
    ;;
  1)
    AdvancedMenu
    ;;
  esac
}

function AdvancedMenu() {
  local cmd
  local options
  local choice
  local retval

  cmd=(dialog --cancel-label "Back" --backtitle "ThemeMaster - $github_user" --title " [ Advanced Menu ] " --menu "You can use UP/DOWN on the D-pad and A to select:" "15" "50" "15")

  options=(
    A "Themes Changelog"
    B "Uninstall a theme"
    C "Reinstall a theme"
  )

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    case $choice in
    A) ChangeLogMenu ;;
    B) UninstallMenu ;;
    C) ReinstallMenu ;;
    esac
    ;;
  1)
    MainMenu
    ;;
  esac
}

function AppChangeLog() {
  local temp

  temp=$(<changelog)
  dialog --clear --backtitle "ThemeMaster - v$current_app_version" --msgbox "$temp" 15 50 2>&1 >/dev/tty1

  SettingsMenu
}

function ColorSchemeMenu() {
  local cmd
  local options
  local choice
  local retval
  local dialog_config
  local temp

  dialog_config=(${app_location}ThemeMaster/*.dialogrc)         # This creates an array of the full paths to all .dialogrc files
  dialog_config=("${dialog_config[@]##*/}") #Remove path prefix
  dialog_config=("${dialog_config[@]%.*}") #Get filename without extension

  cmd=(dialog --backtitle "ThemeMaster - $github_user" --title " [ Color Scheme Selection ] " --radiolist "Select the ThemeMaster UI color scheme :" "15" "50" "15")

  if [[ "$app_colorscheme" == "Default" || -z $app_colorscheme ]]; then
    options+=(Default "System's color scheme" "on")
  else
    options+=(Default "System's scheme" "off")
  fi
  for temp in "${dialog_config[@]}"; do
    if [ "$temp" == "$app_colorscheme" ]; then
      options+=($temp "Customized color scheme" "on")
    else
      options+=($temp "Customized color scheme" "off")
    fi
  done

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "$choice" != "$app_colorscheme" ]; then
      app_colorscheme=$choice
      SaveSettings
      SetColorScheme
    fi
    SettingsMenu
    ;;
  1)
    SettingsMenu
    ;;
  esac
}

function StartupSettings() {
  local cmd
  local options
  local choice
  local choices
  local retval

  cmd=(dialog --ok-label "Apply" --separate-output --backtitle "ThemeMaster - $github_user" --title " [ Startup Options ] " --checklist "NB : ThemeMaster initialisation will take longer espacially if check for themes updates is activated :" "15" "50" "15")

  options=(
    ThemeMaster "Check for updates" $app_autocheckupdate
    Themes "Check for update" $themes_autocheckupdate
  )

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    app_autocheckupdate="off"
    themes_autocheckupdate="off"
    for choice in $choices; do
      case $choice in
      ThemeMaster) app_autocheckupdate="on" ;;
      Themes) themes_autocheckupdate="on" ;;
      esac
    done
    SaveSettings
    SettingsMenu
    ;;
  1)
    SettingsMenu
    ;;
  esac
}

function SelectCollectionMenu() {
  local cmd
  local options
  local choice
  local retval
  local temp

  cmd=(dialog --backtitle "ThemeMaster - $github_user" --title " [ Themes Configuration ] " --radiolist "Set the themes collection to be used with ThemeMaster :" "15" "50" "15")

  for temp in "${collections[@]}"; do
    if [ "$temp" == "$github_user" ]; then
      options+=($temp "Themes collection" "on")
    else
      options+=($temp "Themes collection" "off")
    fi
  done

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "$choice" != "$github_user" ]; then
      github_user=$choice
      dialog --clear
      dialog --infobox "Reloading parameters... Please wait !" 5 50 >/dev/tty1
      themes_updates_checked=0
      SaveSettings
      LoadOnlineThemes
    fi
    MainMenu
    ;;
  1)
    SettingsMenu
    ;;
  esac
}

function SettingsMenu() {
  local cmd
  local options
  local choice
  local retval

  cmd=(dialog --cancel-label "Back" --backtitle "ThemeMaster - $github_user" --title " [ Advanced Menu ] " --menu "You can use UP/DOWN on the D-pad and A to select:" "15" "50" "15")

  options=(
    A "Update ThemeMaster"
    B "View changelog"
    C "UI color scheme"
    D "Startup configuration"
    E "Collection selection"
  )

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    case $choice in
    A)
      if [[ $app_updates_checked -eq 0 ]]; then
        CheckAppUpdates
      elif [[ $app_outdated -eq 0 ]]; then
        dialog --clear --backtitle "ThemeMaster - System" --msgbox "ThemeMaster is up to date." 5 50 2>&1 >/dev/tty1
        SettingsMenu
      else
        UpdateApp
      fi
      ;;
    B) AppChangeLog;;
    C) ColorSchemeMenu ;;
    D) StartupSettings ;;
    E) SelectCollectionMenu ;;
    esac
    ;;
  1)
    MainMenu
    ;;
  esac
}

function MainMenu() {
  local cmd
  local options
  local choice
  local retval

  cmd=(dialog --no-cancel --backtitle "ThemeMaster v$current_app_version - Active collection : $github_user" --title " [ Main Menu ] " --menu "You can use UP/DOWN on the D-pad and A to select:" "15" "50" "15")

  options=(
    A "Install a theme"
    B "Update a theme"
    C "Advanced menu"
    D "ThemeMaster Settings"
    E "Exit to emulationstation"
  )

  choice=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    case $choice in
    A) InstallMenu ;;
    B) UpdateMenu ;;
    C) AdvancedMenu ;;
    D) SettingsMenu ;;
    E) ExitApp ;;
    esac
    ;;
  1)
    ExitApp ;;
  esac
}

clear
InitLoader
